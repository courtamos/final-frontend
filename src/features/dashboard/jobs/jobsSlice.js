/* eslint-disable object-curly-newline */
/* eslint-disable camelcase */
/* eslint-disable no-param-reassign */
import { createAsyncThunk, createSlice, createSelector } from '@reduxjs/toolkit';
// import { performOptimisticUpdate, revertOptimisticUpdate } from 'redux-toolkit-optimistic';
import axios from 'axios';
// import { update } from 'lodash';
// import { undo } from 'redux-undo-action';

// const myAdapter = createEntityAdapter();

const initialState = {
  jobs: [],
  columns: {
    1: {
      id: 1,
      title: 'Interested',
      tickUrl: 'https://i.imgur.com/zOfNZr4.png',
      jobIds: [1, 2, 3],
    },
    2: {
      id: 2,
      title: 'Applied',
      tickUrl: 'https://i.imgur.com/Ay2YdTb.png',
      jobIds: [4, 5, 6],
    },
    3: {
      id: 3,
      title: 'Interviewed',
      tickUrl: 'https://i.imgur.com/D54n1zR.png',
      jobIds: [7, 8],
    },
    4: {
      id: 4,
      title: 'Offered',
      tickUrl: 'https://i.imgur.com/rr4anU1.png',
      jobIds: [9],
    },
    5: {
      id: 5,
      title: 'Rejected',
      tickUrl: 'https://i.imgur.com/36wyVZ1.png',
      jobIds: [],
    },
  },
  columnOrder: [1, 2, 3, 4, 5],
  status: 'idle',
  addJobStatus: 'idle',
  editJobStatus: 'idle',
  deleteJobStatus: 'idle',
};

export const fetchJobs = createAsyncThunk(
  'jobs/fetchJobs', async (_undefined, { rejectWithValue }) => {
    try {
      const response = await axios.get('/api/jobs');
      return response.data.jobs;
    } catch (error) {
      return rejectWithValue(error.response.data);
    }
  },
);

export const addJob = createAsyncThunk(
  'jobs/addJob', async ({ job, event }, { rejectWithValue }) => {
    try {
      const response = await axios.post('api/jobs', { job, event });
      return response.data.job;
    } catch (error) {
      return rejectWithValue(error.response.data);
    }
  },
);

export const editJob = createAsyncThunk(
  'jobs/editJob', async ({ jobId, job, event }, { rejectWithValue }) => {
    try {
      const response = await axios.patch(`api/jobs/${jobId}`, { job, event });
      return response.data.job;
    } catch (error) {
      return rejectWithValue(error.response.data);
    }
  },
);

export const deleteJob = createAsyncThunk(
  'jobs/deleteJob', async ({ jobId }, { rejectWithValue }) => {
    try {
      await axios.delete(`/api/jobs/${jobId}`);
      return jobId;
    } catch (error) {
      return rejectWithValue(error.response.data);
    }
  },
);

// export const editBeautifulJob = createAsyncThunk(
//   'jobs/editBeautifulJob', async ({ jobId, job, event }, { rejectWithValue }) => {
//     try {
//       const response = await axios.patch(`api/jobs/${jobId}`, { job, event });
//       return response.data.job;
//     } catch (error) {
//       return rejectWithValue(error.response.data);
//     }
//   },
// );

export const jobsSlice = createSlice({
  name: 'jobs',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    resetAddJobStatus: (state) => {
      state.addJobStatus = 'idle';
    },
    resetEditJobStatus: (state) => {
      state.editJobStatus = 'idle';
    },
    resetDeleteJobStatus: (state) => {
      state.deleteJobStatus = 'idle';
    },

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(fetchJobs.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(fetchJobs.fulfilled, (state, action) => {
        state.status = 'idle';
        state.jobs = action.payload;
      })
      .addCase(fetchJobs.rejected, (state) => {
        state.status = 'failed';
      })
      .addCase(addJob.pending, (state) => {
        state.addJobStatus = 'loading';
      })
      .addCase(addJob.fulfilled, (state, action) => {
        state.addJobStatus = 'succeeded';
        state.jobs = [...state.jobs, action.payload];
      })
      .addCase(addJob.rejected, (state) => {
        state.addJobStatus = 'failed';
      })
      .addCase(editJob.pending, (state) => {
        state.editJobStatus = 'loading';
      })
      .addCase(editJob.fulfilled, (state, action) => {
        state.editJobStatus = 'succeeded';
        state.jobs = state.jobs.map((job) => {
          if (job.id === action.payload.id) {
            return action.payload;
          }
          return job;
        });
      })
      .addCase(editJob.rejected, (state) => {
        state.editJobStatus = 'failed';
      })
      .addCase(deleteJob.pending, (state) => {
        state.deleteJobStatus = 'loading';
      })
      .addCase(deleteJob.fulfilled, (state, action) => {
        state.deleteJobStatus = 'succeeded';
        state.jobs = state.jobs.filter((job) => job.id !== action.payload);
      })
      .addCase(deleteJob.rejected, (state) => {
        state.deleteJobStatus = 'failed';
      });
    // .addCase(editBeautifulJob.pending, (state, action) => {
    //   // Optimistic update
    //   performOptimisticUpdate(state, myAdapter, action.meta.arg);
    //   state.editJobStatus = 'loading';
    // })
    // .addCase(editBeautifulJob.fulfilled, (state, action) => {
    //   state.editJobStatus = 'succeeded';
    //   if (action.type === 'jobs/edit') {
    //     const result = { ...state.beautifulJobs };
    //     // const jobs = { ...result.jobs };
    //     // const job = jobs[action.payload.jobId];
    //     state.beautifulJobs = result;
    //   }
    //   state.jobs = state.jobs.map((job) => {
    //     if (job.id === action.payload.id) {
    //       return action.payload;
    //     }
    //     return job;
    //   });
    // })
    // .addCase(editBeautifulJob.rejected, (state, action) => {
    // // Rollback state if failed
    //   revertOptimisticUpdate(state, myAdapter, action.meta.arg.id);
    //   state.editJobStatus = 'failed';
    // });
  },
});

export const { resetAddJobStatus, resetEditJobStatus, resetDeleteJobStatus } = jobsSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const jobsSelector = (state) => state.jobs;
export const selectAllJobs = (state) => state.jobs.jobs;
export const selectInterestedJobs = (state) => state.jobs.jobs.filter((job) => job.status === 0);
export const selectAppliedJobs = (state) => state.jobs.jobs.filter((job) => job.status === 1);
export const selectInterviewingJobs = (state) => state.jobs.jobs.filter((job) => job.status === 2);
export const selectOfferJobs = (state) => state.jobs.jobs.filter((job) => job.status === 3);
export const selectRejectedJobs = (state) => state.jobs.jobs.filter((job) => job.status === 4);

export const selectAllColumns = (state) => state.jobs.columns;
export const selectColumnOrder = (state) => state.jobs.columnOrder;

export const selectBeautifulJobs = createSelector(
  [selectAllJobs,
    selectAllColumns,
    selectInterestedJobs,
    selectAppliedJobs,
    selectInterviewingJobs,
    selectOfferJobs,
    selectRejectedJobs],
  (jobs, columns, interested, applied, interviewing, offer, rejected) => {
    const jobsObj = {};

    jobs.forEach((item) => {
      jobsObj[item.id] = item;
    });

    const interestedColumn = {
      ...columns[1],
      jobIds: interested.map((item) => item.id),
    };
    const appliedColumn = {
      ...columns[2],
      jobIds: applied.map((item) => item.id),
    };
    const interviewingColumn = {
      ...columns[3],
      jobIds: interviewing.map((item) => item.id),
    };
    const offerColumn = {
      ...columns[4],
      jobIds: offer.map((item) => item.id),
    };
    const rejectedColumn = {
      ...columns[5],
      jobIds: rejected.map((item) => item.id),
    };
    const cols = { ...columns,
      1: interestedColumn,
      2: appliedColumn,
      3: interviewingColumn,
      4: offerColumn,
      5: rejectedColumn };
    return {
      jobs: jobsObj,
      columns: cols,
      columnOrder: [1, 2, 3, 4, 5],
    };
  },
);

export default jobsSlice.reducer;
